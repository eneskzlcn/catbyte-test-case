// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eneskzlcn/catbyte-test-task/internal/message (interfaces: MessageService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	message "github.com/eneskzlcn/catbyte-test-task/internal/message"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// PushMessage mocks base method.
func (m *MockMessageService) PushMessage(arg0 *message.MessageRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushMessage indicates an expected call of PushMessage.
func (mr *MockMessageServiceMockRecorder) PushMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessage", reflect.TypeOf((*MockMessageService)(nil).PushMessage), arg0)
}
